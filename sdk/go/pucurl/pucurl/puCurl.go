// Code generated by pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pucurl

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Pulumi provider for making API calls
type PuCurl struct {
	pulumi.CustomResourceState

	// The body of the request.
	Body pulumi.StringPtrOutput `pulumi:"body"`
	// The body of the request.
	DeleteBody pulumi.StringPtrOutput `pulumi:"deleteBody"`
	// The headers to send with the request.
	DeleteHeaders pulumi.StringMapOutput `pulumi:"deleteHeaders"`
	// The HTTP method to use.
	DeleteMethod pulumi.StringPtrOutput `pulumi:"deleteMethod"`
	// The response from the API call.
	DeleteResponse pulumi.StringPtrOutput `pulumi:"deleteResponse"`
	// The expected response code.
	DeleteResponseCodes pulumi.StringArrayOutput `pulumi:"deleteResponseCodes"`
	// The API endpoint to call.
	DeleteUrl pulumi.StringPtrOutput `pulumi:"deleteUrl"`
	// The headers to send with the request.
	Headers pulumi.StringMapOutput `pulumi:"headers"`
	// The HTTP method to use.
	Method pulumi.StringOutput `pulumi:"method"`
	// The name for this API call.
	Name pulumi.StringOutput `pulumi:"name"`
	// The response from the API call.
	Response pulumi.StringOutput `pulumi:"response"`
	// The expected response code.
	ResponseCodes pulumi.StringArrayOutput `pulumi:"responseCodes"`
	// The API endpoint to call.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewPuCurl registers a new resource with the given unique name, arguments, and options.
func NewPuCurl(ctx *pulumi.Context,
	name string, args *PuCurlArgs, opts ...pulumi.ResourceOption) (*PuCurl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Method == nil {
		return nil, errors.New("invalid value for required argument 'Method'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.ResponseCodes == nil {
		return nil, errors.New("invalid value for required argument 'ResponseCodes'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	var resource PuCurl
	err := ctx.RegisterResource("pucurl:pucurl:PuCurl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPuCurl gets an existing PuCurl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPuCurl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PuCurlState, opts ...pulumi.ResourceOption) (*PuCurl, error) {
	var resource PuCurl
	err := ctx.ReadResource("pucurl:pucurl:PuCurl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PuCurl resources.
type puCurlState struct {
}

type PuCurlState struct {
}

func (PuCurlState) ElementType() reflect.Type {
	return reflect.TypeOf((*puCurlState)(nil)).Elem()
}

type puCurlArgs struct {
	// The body of the request.
	Body *string `pulumi:"body"`
	// The body of the request.
	DeleteBody *string `pulumi:"deleteBody"`
	// The headers to send with the request.
	DeleteHeaders map[string]string `pulumi:"deleteHeaders"`
	// The HTTP method to use.
	DeleteMethod *string `pulumi:"deleteMethod"`
	// The expected response code.
	DeleteResponseCodes []string `pulumi:"deleteResponseCodes"`
	// The API endpoint to call.
	DeleteUrl *string `pulumi:"deleteUrl"`
	// The headers to send with the request.
	Headers map[string]string `pulumi:"headers"`
	// The HTTP method to use.
	Method string `pulumi:"method"`
	// The name for this API call.
	Name string `pulumi:"name"`
	// The expected response code.
	ResponseCodes []string `pulumi:"responseCodes"`
	// The API endpoint to call.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a PuCurl resource.
type PuCurlArgs struct {
	// The body of the request.
	Body pulumi.StringPtrInput
	// The body of the request.
	DeleteBody pulumi.StringPtrInput
	// The headers to send with the request.
	DeleteHeaders pulumi.StringMapInput
	// The HTTP method to use.
	DeleteMethod pulumi.StringPtrInput
	// The expected response code.
	DeleteResponseCodes pulumi.StringArrayInput
	// The API endpoint to call.
	DeleteUrl pulumi.StringPtrInput
	// The headers to send with the request.
	Headers pulumi.StringMapInput
	// The HTTP method to use.
	Method pulumi.StringInput
	// The name for this API call.
	Name pulumi.StringInput
	// The expected response code.
	ResponseCodes pulumi.StringArrayInput
	// The API endpoint to call.
	Url pulumi.StringInput
}

func (PuCurlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*puCurlArgs)(nil)).Elem()
}

type PuCurlInput interface {
	pulumi.Input

	ToPuCurlOutput() PuCurlOutput
	ToPuCurlOutputWithContext(ctx context.Context) PuCurlOutput
}

func (*PuCurl) ElementType() reflect.Type {
	return reflect.TypeOf((**PuCurl)(nil)).Elem()
}

func (i *PuCurl) ToPuCurlOutput() PuCurlOutput {
	return i.ToPuCurlOutputWithContext(context.Background())
}

func (i *PuCurl) ToPuCurlOutputWithContext(ctx context.Context) PuCurlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PuCurlOutput)
}

// PuCurlArrayInput is an input type that accepts PuCurlArray and PuCurlArrayOutput values.
// You can construct a concrete instance of `PuCurlArrayInput` via:
//
//	PuCurlArray{ PuCurlArgs{...} }
type PuCurlArrayInput interface {
	pulumi.Input

	ToPuCurlArrayOutput() PuCurlArrayOutput
	ToPuCurlArrayOutputWithContext(context.Context) PuCurlArrayOutput
}

type PuCurlArray []PuCurlInput

func (PuCurlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PuCurl)(nil)).Elem()
}

func (i PuCurlArray) ToPuCurlArrayOutput() PuCurlArrayOutput {
	return i.ToPuCurlArrayOutputWithContext(context.Background())
}

func (i PuCurlArray) ToPuCurlArrayOutputWithContext(ctx context.Context) PuCurlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PuCurlArrayOutput)
}

// PuCurlMapInput is an input type that accepts PuCurlMap and PuCurlMapOutput values.
// You can construct a concrete instance of `PuCurlMapInput` via:
//
//	PuCurlMap{ "key": PuCurlArgs{...} }
type PuCurlMapInput interface {
	pulumi.Input

	ToPuCurlMapOutput() PuCurlMapOutput
	ToPuCurlMapOutputWithContext(context.Context) PuCurlMapOutput
}

type PuCurlMap map[string]PuCurlInput

func (PuCurlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PuCurl)(nil)).Elem()
}

func (i PuCurlMap) ToPuCurlMapOutput() PuCurlMapOutput {
	return i.ToPuCurlMapOutputWithContext(context.Background())
}

func (i PuCurlMap) ToPuCurlMapOutputWithContext(ctx context.Context) PuCurlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PuCurlMapOutput)
}

type PuCurlOutput struct{ *pulumi.OutputState }

func (PuCurlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PuCurl)(nil)).Elem()
}

func (o PuCurlOutput) ToPuCurlOutput() PuCurlOutput {
	return o
}

func (o PuCurlOutput) ToPuCurlOutputWithContext(ctx context.Context) PuCurlOutput {
	return o
}

// The body of the request.
func (o PuCurlOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PuCurl) pulumi.StringPtrOutput { return v.Body }).(pulumi.StringPtrOutput)
}

// The body of the request.
func (o PuCurlOutput) DeleteBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PuCurl) pulumi.StringPtrOutput { return v.DeleteBody }).(pulumi.StringPtrOutput)
}

// The headers to send with the request.
func (o PuCurlOutput) DeleteHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PuCurl) pulumi.StringMapOutput { return v.DeleteHeaders }).(pulumi.StringMapOutput)
}

// The HTTP method to use.
func (o PuCurlOutput) DeleteMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PuCurl) pulumi.StringPtrOutput { return v.DeleteMethod }).(pulumi.StringPtrOutput)
}

// The response from the API call.
func (o PuCurlOutput) DeleteResponse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PuCurl) pulumi.StringPtrOutput { return v.DeleteResponse }).(pulumi.StringPtrOutput)
}

// The expected response code.
func (o PuCurlOutput) DeleteResponseCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PuCurl) pulumi.StringArrayOutput { return v.DeleteResponseCodes }).(pulumi.StringArrayOutput)
}

// The API endpoint to call.
func (o PuCurlOutput) DeleteUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PuCurl) pulumi.StringPtrOutput { return v.DeleteUrl }).(pulumi.StringPtrOutput)
}

// The headers to send with the request.
func (o PuCurlOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PuCurl) pulumi.StringMapOutput { return v.Headers }).(pulumi.StringMapOutput)
}

// The HTTP method to use.
func (o PuCurlOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v *PuCurl) pulumi.StringOutput { return v.Method }).(pulumi.StringOutput)
}

// The name for this API call.
func (o PuCurlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PuCurl) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The response from the API call.
func (o PuCurlOutput) Response() pulumi.StringOutput {
	return o.ApplyT(func(v *PuCurl) pulumi.StringOutput { return v.Response }).(pulumi.StringOutput)
}

// The expected response code.
func (o PuCurlOutput) ResponseCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PuCurl) pulumi.StringArrayOutput { return v.ResponseCodes }).(pulumi.StringArrayOutput)
}

// The API endpoint to call.
func (o PuCurlOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *PuCurl) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type PuCurlArrayOutput struct{ *pulumi.OutputState }

func (PuCurlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PuCurl)(nil)).Elem()
}

func (o PuCurlArrayOutput) ToPuCurlArrayOutput() PuCurlArrayOutput {
	return o
}

func (o PuCurlArrayOutput) ToPuCurlArrayOutputWithContext(ctx context.Context) PuCurlArrayOutput {
	return o
}

func (o PuCurlArrayOutput) Index(i pulumi.IntInput) PuCurlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PuCurl {
		return vs[0].([]*PuCurl)[vs[1].(int)]
	}).(PuCurlOutput)
}

type PuCurlMapOutput struct{ *pulumi.OutputState }

func (PuCurlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PuCurl)(nil)).Elem()
}

func (o PuCurlMapOutput) ToPuCurlMapOutput() PuCurlMapOutput {
	return o
}

func (o PuCurlMapOutput) ToPuCurlMapOutputWithContext(ctx context.Context) PuCurlMapOutput {
	return o
}

func (o PuCurlMapOutput) MapIndex(k pulumi.StringInput) PuCurlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PuCurl {
		return vs[0].(map[string]*PuCurl)[vs[1].(string)]
	}).(PuCurlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PuCurlInput)(nil)).Elem(), &PuCurl{})
	pulumi.RegisterInputType(reflect.TypeOf((*PuCurlArrayInput)(nil)).Elem(), PuCurlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PuCurlMapInput)(nil)).Elem(), PuCurlMap{})
	pulumi.RegisterOutputType(PuCurlOutput{})
	pulumi.RegisterOutputType(PuCurlArrayOutput{})
	pulumi.RegisterOutputType(PuCurlMapOutput{})
}
